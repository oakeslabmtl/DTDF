description <https://bentleyjoakes.github.io/incubator/incubator_dt#> as incubator {

	uses <https://bentleyjoakes.github.io/DTDF/vocab/DTDFVocab#> as DTDFVocab
	
	uses <https://bentleyjoakes.github.io/DTDF/vocab/base#> as base
	extends <https://bentleyjoakes.github.io/DTDF/desc/baseDesc#> as baseDesc
	extends <https://bentleyjoakes.github.io/incubator/incubator_pt#> as pt
	
	instance IncubatorDT : DTDFVocab:DigitalTwin [
		DTDFVocab:purpose "enhance the functionality of the PT through the DT services"
		DTDFVocab:multiplicity 1
		DTDFVocab:evolution identifying_physics
	]
	
	// SERVICES (C6)
	
	instance heater_state_estimation_service : DTDFVocab:Service[
		DTDFVocab:provides heater_state_estimation
		DTDFVocab:atStage baseDesc:operation
	]
	instance real_time_viz_service : DTDFVocab:Service[
		DTDFVocab:provides real_time_viz
		DTDFVocab:atStage baseDesc:operation
	]
	instance anomaly_detector : DTDFVocab:Service [
		DTDFVocab:provides anomaly_warning
		DTDFVocab:atStage baseDesc:operation
	]
	instance what_if_sim : DTDFVocab:Service [
		DTDFVocab:provides what_if_sim_results
		DTDFVocab:atStage baseDesc:operation
	]
	instance safe_adaptation : DTDFVocab:Service [
		DTDFVocab:provides controller_control
		DTDFVocab:atStage baseDesc:operation
	]
	instance policy_optimization : DTDFVocab:Service [
		DTDFVocab:provides controller_control
		DTDFVocab:atStage baseDesc:operation
	]
	
	// ENABLERS
	
	instance simulator : DTDFVocab:Enabler [
		DTDFVocab:enables what_if_sim
	]
	instance anomaly_detector_enabler : DTDFVocab:Enabler [
		DTDFVocab:enables anomaly_detector
	]
	instance state_estimator : DTDFVocab:Enabler [
		DTDFVocab:enables heater_state_estimation_service
		DTDFVocab:enables anomaly_detector
		DTDFVocab:enables safe_adaptation
	]
	instance optimization_algs : DTDFVocab:Enabler [
		DTDFVocab:enables safe_adaptation
		DTDFVocab:enables safe_adaptation
	]
	instance dashboard_enabler : DTDFVocab:Enabler [
		DTDFVocab:enables policy_optimization
	]
	
	// MODELS / DATA
	
	instance two_para_model : DTDFVocab:Model [
		DTDFVocab:inputTo dashboard_enabler
		DTDFVocab:inputTo anomaly_detector_enabler
		DTDFVocab:inputTo state_estimator
		DTDFVocab:inputTo optimization_algs
	]
	instance four_para_model : DTDFVocab:Model [
		DTDFVocab:inputTo dashboard_enabler
		DTDFVocab:inputTo anomaly_detector_enabler
		DTDFVocab:inputTo state_estimator
		DTDFVocab:inputTo optimization_algs
	]
	instance ANN_model : DTDFVocab:Model [
		DTDFVocab:inputTo dashboard_enabler
		DTDFVocab:inputTo anomaly_detector_enabler
		DTDFVocab:inputTo state_estimator
		DTDFVocab:inputTo optimization_algs
	]
	instance ANN_state_estimation_model : DTDFVocab:Model [
		DTDFVocab:inputTo dashboard_enabler
		DTDFVocab:inputTo anomaly_detector_enabler
		DTDFVocab:inputTo state_estimator
		DTDFVocab:inputTo optimization_algs
	]
	instance controller_model : DTDFVocab:Model
	 [
		DTDFVocab:inputTo simulator
		DTDFVocab:inputTo state_estimator
		DTDFVocab:inputTo optimization_algs
	]
	instance pt_model : DTDFVocab:Model [
		DTDFVocab:inputTo simulator
	]
	instance env_model : DTDFVocab:Model [
		DTDFVocab:inputTo simulator
	]
	instance pt_and_env_model : DTDFVocab:Model [
		DTDFVocab:inputTo simulator
	]
	instance temp_readings_streaming : DTDFVocab:Data
	 [
		DTDFVocab:inputTo dashboard_enabler
		DTDFVocab:inputTo optimization_algs
		DTDFVocab:fromData pt:temp_readings_trans
	]
	instance temp_readings_historical : DTDFVocab:Data
	 [
		DTDFVocab:inputTo simulator
	]
	instance controller_state : DTDFVocab:Data [
		DTDFVocab:fromData pt:controller_state_trans
	]

	// COMMUNICATION
	
	instance dashboard_viz : DTDFVocab:Insight [
		DTDFVocab:hasTimeScale baseDesc:slower_trt
	]
	
	instance commands : DTDFVocab:Action [
		DTDFVocab:IsAutomatic true
		DTDFVocab:hasTimeScale baseDesc:rt
	]
	
	// INSIGHTS/ACTIONS
	
	instance heater_state_estimation : DTDFVocab:Insight[
		DTDFVocab:hasTimeScale baseDesc:rt
		base:desc "state estimation of the heater"
	]
	instance dashboard : DTDFVocab:Insight[
		DTDFVocab:hasTimeScale baseDesc:rt
		base:desc "dashboard visualization of the current state and historical data"
	]
	instance anomaly_warning : DTDFVocab:Insight[
		DTDFVocab:hasTimeScale baseDesc:slower_trt
		base:desc "anomaly detection"
	]
	instance real_time_viz : DTDFVocab:Insight [
		DTDFVocab:hasTimeScale baseDesc:rt
		base:desc "3D visualization of the current state"
	]
	instance controller_control : DTDFVocab:Action [
		DTDFVocab:hasTimeScale baseDesc:rt
		base:desc "control policy updates to the PT"
	]
	instance what_if_sim_results : DTDFVocab:Insight [
		DTDFVocab:hasTimeScale baseDesc:faster_trt
		base:desc " what-if analysis for future behavior under different controller configurations"
	]
	
	// DT CHARACTERISTICS
	
	// C5: Virtual to Physical Interaction
	instance virtual_to_physical : DTDFVocab:VirtualToPhysical [
		base:desc "The controller in the PT sends sensor and actuator data on a periodic basis over RabbitMQ."
	]
	
	// C12: Constellation
	instance constellation : DTDFVocab:Constellation [
		base:desc "The orchestration of the system-as-a-whole is carried out by micro-services. These microservices set up the multiple components from configuration files, including the models and data, tools and enablers, services, and physical-to-virtual and virtual-to-physical interaction. It is possible to leave aside some of the micro-services when initializing the DT for testing purposes.."
	]
	
	// C13: EvolutionStage
	instance identifying_physics : DTDFVocab:EvolutionStage [
		base:desc "identifying the physics for the PT"
		DTDFVocab:nextStage building_plant_models
	]
	
	instance building_plant_models : DTDFVocab:EvolutionStage [
		base:desc "building the plant models"
		DTDFVocab:nextStage characterizing_heating_power
	]
	
	instance characterizing_heating_power : DTDFVocab:EvolutionStage [
		base:desc "characterizing the heating power"
		DTDFVocab:nextStage building_physical_prototype
	]
	
	instance building_physical_prototype : DTDFVocab:EvolutionStage [
		base:desc "building the first physical prototype"
		DTDFVocab:nextStage refining_parameters
	]
	
	instance refining_parameters : DTDFVocab:EvolutionStage [
		base:desc "experimentally refining the parameters for the plant model"
		DTDFVocab:nextStage creating_controller_model
	]
	
	instance creating_controller_model : DTDFVocab:EvolutionStage [
		base:desc "creating the controller model"
		DTDFVocab:nextStage deploying_controller
	]
	
	instance deploying_controller : DTDFVocab:EvolutionStage [
		base:desc "deploying the controller code into the physical controller"
		DTDFVocab:nextStage deploying_visualization
	]
	
	instance deploying_visualization : DTDFVocab:EvolutionStage [
		base:desc " deploying the visualization service"
		DTDFVocab:nextStage providing_services_1
	]
	
	instance providing_services_1 : DTDFVocab:EvolutionStage [
		base:desc "providing services for state estimation and anomaly detection"
		DTDFVocab:nextStage providing_services_2
	]
	
	instance providing_services_2 : DTDFVocab:EvolutionStage [
		base:desc "providing the service for optimizing the control policy"
	]
	
	// C14: FidelityConsideration
	instance fidelity_consideration : DTDFVocab:FidelityConsideration [
		base:desc "The models have been calibrated against experimental data and the predictive accuracy of the best model is within 2°C. The models have been validated in a controlled environment."
	]
	
	// C15: TechnicalConnection
	instance technical_connection : DTDFVocab:TechnicalConnection [
		base:desc "The PT-to-DT connection is done over Wi-Fi on a laptop using RabbitMQ."
	]
	
	// C16: DT hosting/deployment
	instance deployment : DTDFVocab:Deployment [
		base:desc "The Incubator DT is deployed locally on a LAN."
	]
	
	// C18: Horizontal Integration
	instance horizontal_integration : DTDFVocab:HoriIntegration [
		base:desc "There is horizontal integration with the micro-services of the Incubator DT. The DT is able to exchange information with other information systems over RabbitMQ."
	]
	
	// C19: Data ownership and privacy	
	instance data_owneship_privacy : DTDFVocab:DataOwnershipPrivacy [
		base:desc "Datasets have been provided online to the public. No privacy-related data are stored."
	]
	
	// C20: Standardization
	instance standardization : DTDFVocab:Standardization [
		base:desc "Communication is carried out using AMQP standard via RabbitMQ. Behavioral models have been produced following the FMI standard version 2."
	]
	
	// C21: Security and safety considerations	
	instance security_safety : DTDFVocab:SecuritySafety [
		base:desc "Communication can be TLS encrypted through the RabbitMQ broker. The physical controller counts with a safety consideration that turns off system if the temperature read is above 60°C or if the network connection is unstable."
	]
	
}