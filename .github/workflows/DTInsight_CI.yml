name: DTInsight_CI
permissions:
  contents: write
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
jobs:
  take_screenshot_dtinsight:
    runs-on: ubuntu-latest
    permissions: write-all
    name: Take a Screenshot Using DTInsight
    steps:
      - name: Checkout DTInsight repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_DTINSIGHT }}
          repository: oakeslab-polymtl/DTInsight
          ref: develop
          path: DTInsight
      
      - name: Checkout DTOnto repository
        uses: actions/checkout@v4
        with:
          path: DTOnto
      
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      
      - name: Run Fuseki server with DTOnto data
        working-directory: ./DTOnto
        run: |
          chmod +x gradlew
          # Start Fuseki server
          ./gradlew startFuseki &
          # Give Fuseki time to start
          echo "Waiting for service to start..."
          for i in {1..30}; do
            curl -s http://localhost:3030 && break
            echo "Service not ready. Retrying in 2 seconds..."
            sleep 2
          done
          # Verify Fuseki is running
          curl -v http://localhost:3030
          # Load data into Fuseki
          ./gradlew owlLoad
          sleep 10
      
      - name: Export game
        id: export
        uses: firebelley/godot-export@master
        with:
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz
          relative_project_path: ./DTInsight
          cache: true
          archive_output: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
      
      - name: Unzip for Linux and set permissions
        run: |
          unzip /home/runner/.local/share/godot/archives/Linux.zip -d /home/runner/.local/share/godot/archives/
          chmod +x /home/runner/.local/share/godot/archives/DTInsight.x86_64

      - name: Unzip HTML5 export
        run: |
          mkdir -p web_export
          unzip /home/runner/.local/share/godot/archives/Web.zip -d web_export/
      
      - name: Copy web export to website static folder
        run: |
          mkdir -p DTOnto/website/static/DTInsight_web_export
          cp -r web_export/* DTOnto/website/static/DTInsight_web_export
      
      - name: Run Godot and trigger screenshot
        run: |
          xvfb-run --server-args="-screen 0 1024x768x24" /home/runner/.local/share/godot/archives/DTInsight.x86_64 -- --ci-mode &
          sleep 5
      
      - name: Process screenshot
        working-directory: ./DTOnto
        run: |
          # Create screenshots directory
          mkdir -p ci_screenshots
          
          # Generate screenshot name
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y-%m-%d')
          SCREENSHOT_NAME="ci_screenshots/${DATE}_${COMMIT_HASH}.png"
          
          # Trigger a screenshot
          curl -v http://localhost:9090
          
          # Wait for the screenshot to be taken and saved
          sleep 3
          
          # Copy the local screenshot file to the destination with the new name
          cp ~/.local/share/godot/app_userdata/DTInsight/latest_screenshot.png "$SCREENSHOT_NAME"
          echo "SCREENSHOT_NAME=$SCREENSHOT_NAME" >> $GITHUB_ENV
          
          # Also copy to website static folder
          mkdir -p website/static/images
          cp -f ~/.local/share/godot/app_userdata/DTInsight/latest_screenshot.png "website/static/images/architecture.png"
      
      - name: Commit screenshot
        working-directory: ./DTOnto
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add "$SCREENSHOT_NAME"
          git add "website/static/images/architecture.png"
          git add "website/static/DTInsight_web_export"
          git commit -m "Add CI screenshot and DTInsight web export for commit ${GITHUB_SHA}"
          git push
          
      # Save website directory as artifact for next job
      - name: Archive website directory
        uses: actions/upload-artifact@v4
        with:
          name: website-files
          path: DTOnto/website/
          retention-days: 1

  build_and_deploy_hugo:
    needs: take_screenshot_dtinsight
    runs-on: ubuntu-latest
    name: Build and Deploy Hugo Website
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout DTOnto repository
        uses: actions/checkout@v4
      
      # Download the website directory with the updated screenshot
      - name: Download website directory
        uses: actions/download-artifact@v4
        with:
          name: website-files
          path: ./website
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build Hugo Site
        working-directory: ./website
        run: |
          hugo --minify --gc
      
      # Configure GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Upload the Hugo build output to GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './website/public'
          
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
