name: DTInsight_CI
permissions:
  contents: write
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
jobs:
  take_screenshot_dtinsight:
    runs-on: ubuntu-latest
    permissions: write-all
    name: Take a Screenshot Using DTInsight
    steps:
      - name: Checkout DTInsight repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_DTINSIGHT }}
          repository: oakeslab-polymtl/DTInsight
          ref: develop
          path: DTInsight
      
      - name: Checkout DTDF repository
        uses: actions/checkout@v4
        with:
          path: DTDF
          
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      
      - name: Run Fuseki server with DTDF data
        working-directory: ./DTDF
        run: |
          chmod +x gradlew
          # Start Fuseki server
          ./gradlew startFuseki &
          # Give Fuseki time to start
          echo "Waiting for service to start..."
          for i in {1..30}; do
            curl -s http://localhost:3030 && break
            echo "Service not ready. Retrying in 2 seconds..."
            sleep 2
          done
          # Verify Fuseki is running
          curl -v http://localhost:3030
          # Load data into Fuseki
          ./gradlew owlLoad
          sleep 10
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Ensure directory for downloads exists
        run: mkdir -p /home/runner/.local/share/

      - name: Download Linux.zip
        run: |
          curl -L -o /home/runner/.local/share/Linux.zip \
            https://github.com/oakeslab-polymtl/DTInsight/releases/download/stable/Linux.zip

      - name: Download Web.zip
        run: |
          curl -L -o /home/runner/.local/share/Web.zip \
            https://github.com/oakeslab-polymtl/DTInsight/releases/download/stable/Web.zip
      
      - name: Unzip for Linux and set permissions
        run: |
          unzip /home/runner/.local/share/Linux.zip -d /home/runner/.local/share/godot/archives/
          chmod +x /home/runner/.local/share/godot/archives/DTInsight.x86_64

      - name: Unzip HTML5 export
        run: |
          mkdir -p web_export
          unzip /home/runner/.local/share/Web.zip -d web_export/
      
      - name: Copy web export to website static folder
        run: |
          mkdir -p DTDF/website/static/DTInsight_web_export
          cp -r web_export/* DTDF/website/static/DTInsight_web_export
      
      - name: Run Godot
        run: |
          xvfb-run --server-args="-screen 0 1024x768x24" /home/runner/.local/share/godot/archives/DTInsight.x86_64 -- --ci-mode &
          sleep 5
      
      - name: Trigger CI/CD command (screenshot and data dump) and process those
        working-directory: ./DTDF
        run: |
          # Create screenshots directory
          mkdir -p ci_screenshots
          
          # Generate screenshot name
          COMMIT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y-%m-%d')
          SCREENSHOT_NAME="ci_screenshots/${DATE}_${COMMIT_HASH}.png"
          
          # Trigger the Godot CI/CD server
          curl -v http://localhost:9090
          
          # Wait for the screenshot to be taken and saved
          sleep 10
          
          # Copy the local screenshot file to the destination with the new name
          cp ~/.local/share/godot/app_userdata/DTInsight/latest_screenshot.png "$SCREENSHOT_NAME"
          echo "SCREENSHOT_NAME=$SCREENSHOT_NAME" >> $GITHUB_ENV
          
          # Also copy to website static folder
          mkdir -p website/static/images
          cp -f ~/.local/share/godot/app_userdata/DTInsight/latest_screenshot.png "website/static/images/architecture.png"

          # Copy data dump to website static folder
          cp -f ~/.local/share/godot/app_userdata/DTInsight/data_dump.yaml "website/static/data_dump.yaml"

          # Copy characteristics table to website partials folder
          cp -f ~/.local/share/godot/app_userdata/DTInsight/characteristics-table.html "website/themes/my-theme/layouts/partials/characteristics-table.html"
      
      - name: Commit screenshot
        working-directory: ./DTDF
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add "$SCREENSHOT_NAME"
          git add "website/static/images/architecture.png"
          git add "website/static/data_dump.yaml"
          git add "website/themes/my-theme/layouts/partials/characteristics-table.html"
          git add "website/static/DTInsight_web_export"
          git commit -m "Added CI screenshot, characteristics table, and DTInsight web export for commit ${GITHUB_SHA}"
          git push
          
      # Save website directory as artifact for next job
      - name: Archive website directory
        uses: actions/upload-artifact@v4
        with:
          name: website-files
          path: DTDF/website/
          retention-days: 1

  build_and_deploy_hugo:
    needs: take_screenshot_dtinsight
    runs-on: ubuntu-latest
    name: Build and Deploy Hugo Website
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout DTDF repository
        uses: actions/checkout@v4
      
      # Download the website directory with the updated screenshot
      - name: Download website directory
        uses: actions/download-artifact@v4
        with:
          name: website-files
          path: ./website
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build Hugo Site
        working-directory: ./website
        run: |
          hugo --minify --gc
      
      # Configure GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Upload the Hugo build output to GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './website/public'
          
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
